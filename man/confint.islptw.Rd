% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/confint.R
\name{confint.islptw}
\alias{confint.islptw}
\title{Confidence intervals for islptw objects}
\usage{
\method{confint}{islptw}(object, parm = c("islptw_tmle"), level = 0.95,
  contrast = NULL, ...)
}
\arguments{
\item{object}{An object of class \code{"islptw"}}

\item{parm}{A vector indicating for which estimators to return a 
confidence interval. Possible estimators include the TMLE IPTW 
(\code{"islptw_tmle"}, recommended), the one-step IPTW 
(\code{"islptw_os"}, not recommended), the standard IPTW 
(\code{"iptw"}, recommended only for comparison to the other two estimators).}

\item{level}{The level of the confidence interval}

\item{contrast}{This option specifies what parameter to return confidence intervals for.
If \code{contrast=NULL}, then compute confidence intervals for the covariate-adjusted
marginal means. \code{contrast} can also be input as a numeric vector of ones, negative ones,
and zeros to define linear combinations of the various means (e.g., to estimate an average
treatment effect, see examples). \code{contrast} can also be a list with named functions
\code{f}, \code{f_inv}, \code{h}, and \code{h_grad}. The first two functions should take
as input argument \code{eff}. Respectively, these specify which transformation 
of the effect measure to compute the confidence interval for and the inverse
transformation to put the confidence interval back on the original scale. The function \code{h}
defines the contrast to be estimated and should take as input \code{parm}, a vector
of the same length as \code{object$est}, and output the desired contrast. The function
\code{h_grad} is the gradient of the function \code{h}. See examples.}

\item{...}{Other options (not currently used)}
}
\value{
An object of class \code{"confint.islptw"} with point estimates and
confidence intervals of the specified level.
}
\description{
Estimate confidence intervals for objects of class \code{"islptw"}
}
\examples{
# load super learner
library(SuperLearner)
# fit islptw
set.seed(123456)
n <- 200
W <- data.frame(W1 = runif(n), W2 = rnorm(n))
A <- rbinom(n,1,plogis(W$W1 - W$W2))
Y <- rbinom(n, 1, plogis(W$W1*W$W2*A))

fit1 <- islptw(W = W, A = A, Y = Y, a_0 = c(1,0),
               SL_g=c("SL.glm","SL.mean","SL.step"),
               SL_Qr="SL.glm")

# get confidence intervals for each mean
ci_mean <- confint(fit1)

# get confidence intervals for ATE
ci_ATE <- confint(fit1, contrast = c(1,-1))

# get confidence intervals for risk ratio 
# by inputting own contrast function
# this computes CI on log scale and back transforms
myContrast <- list(f = function(eff){ log(eff) },
                   f_inv = function(eff){ exp(eff) },
                   h = function(parm){ parm[1]/parm[2] },
                   h_grad =  function(parm){ c(1/parm[1],-1/parm[2]) })
ci_RR <- confint(fit1, contrast = myContrast)
}
